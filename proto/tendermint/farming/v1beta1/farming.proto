syntax = "proto3";

package cosmos.farming.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/tendermint/farming/x/farming/types";

// Params defines the set of params for the farming module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  // private_plan_creation_fee specifies the fee for plan creation
  // this fee prevents from spamming and it is collected in the community pool
  repeated cosmos.base.v1beta1.Coin private_plan_creation_fee = 1 [
    (gogoproto.moretags)     = "yaml:\"private_plan_creation_fee\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];

  // When a farmer creates new staking, the farmer needs to pay
  // staking_creation_fee to prevent spam on the staking struct.
  repeated cosmos.base.v1beta1.Coin staking_creation_fee = 2 [
    (gogoproto.moretags)     = "yaml:\"staking_creation_fee\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];

  // The universal epoch length in number of days. Every process for staking and
  // reward distribution is executed with this epoch_days frequency.
  uint32 epoch_days = 3 [(gogoproto.moretags) = "yaml:\"epoch_days\""];
}

// BasePlan defines a base plan type. It contains all the necessary fields
// for basic farming plan functionality. Any custom farming plan type should
// extend this type for additional functionality (e.g. fixed amount plan, ratio
// plan).
message BasePlan {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  option (cosmos_proto.implements_interface) = "PlanI";

  // id specifies index of the farming plan
  uint64 id = 1;

  // type specifies the plan type; type 0 is public and 1 is private
  // public plan must be created through governance proposal and private plan is
  // created by account
  PlanType type = 2;

  // farming_pool_address defines the bech32-encoded address of the farming pool
  string farming_pool_address = 3 [(gogoproto.moretags) = "yaml:\"farming_pool_address\""];

  // reward_pool_address defines the bech32-encoded address that distributes
  // reward amount of coins to farmers
  string reward_pool_address = 4 [(gogoproto.moretags) = "yaml:\"reward_pool_address\""];

  // termination_address defines the bech32-encoded address that terminates plan
  // when the plan ends after the end time, the balance of farming pool address
  // is transferred to the termination address
  string termination_address = 5 [(gogoproto.moretags) = "yaml:\"termination_address\""];

  // staking_coin_weights specifies coin weights for the plan
  repeated cosmos.base.v1beta1.DecCoin staking_coin_weights = 6 [
    (gogoproto.moretags)     = "yaml:\"staking_coin_weights\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 7
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"start_time\""];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 8
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"end_time\""];
}

// FixedAmountPlan defines a fixed amount plan that fixed amount of coins are
// distributed for every epoch.
message FixedAmountPlan {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  BasePlan base_plan = 1 [(gogoproto.embed) = true, (gogoproto.moretags) = "yaml:\"base_plan\""];

  // epoch_amount specifies the distributing amount for each epoch
  repeated cosmos.base.v1beta1.Coin epoch_amount = 2 [
    (gogoproto.moretags)     = "yaml:\"epoch_amount\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}

// RatioPlan defines a ratio plan that ratio of total coins in farming pool
// address is distributed for every epoch.
message RatioPlan {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  BasePlan base_plan = 1 [(gogoproto.embed) = true, (gogoproto.moretags) = "yaml:\"base_plan\""];

  // epoch_ratio specifies the distributing amount by ratio
  string epoch_ratio = 2 [
    (gogoproto.moretags)   = "yaml:\"epoch_ratio\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// PlanType enumerates the valid types of a plan.
enum PlanType {
  option (gogoproto.goproto_enum_prefix) = false;

  // PLAN_TYPE_UNSPECIFIED defines the default plan type.
  PLAN_TYPE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "PlanTypeNil"];
  // PLAN_TYPE_PUBLIC defines the public plan type.
  PLAN_TYPE_PUBLIC = 1 [(gogoproto.enumvalue_customname) = "PlanTypePublic"];
  // PLAN_TYPE_PRIVATE defines the private plan type.
  PLAN_TYPE_PRIVATE = 2 [(gogoproto.enumvalue_customname) = "PlanTypePrivate"];
}

// Staking defines a farmer's staking information.
message Staking {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  // id specifies index of the staking
  uint64 id = 1;

  // farmer defines the bech32-encoded address of the staker for the plan
  string farmer = 2;

  // staked_coins specifies the staking amount for the plan of farmer
  repeated cosmos.base.v1beta1.Coin staked_coins = 3 [
    (gogoproto.moretags)     = "yaml:\"staked_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];

  // queued_coins specifies the coins on standby before current epoch passes and
  // gets staked.
  repeated cosmos.base.v1beta1.Coin queued_coins = 4 [
    (gogoproto.moretags)     = "yaml:\"queued_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}

// Reward defines a record of farming rewards.
message Reward {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  // farmer defines the bech32-encoded address of the staker for the plan
  string farmer = 1;

  // staking_coin_denom is denom of staked coin as a source of the reward
  string staking_coin_denom = 2 [(gogoproto.moretags) = "yaml:\"staking_coin_denom\""];

  // reward_coins specifies rewards amount at this point in time when farmers
  // receive them from the farming plan
  repeated cosmos.base.v1beta1.Coin reward_coins = 3 [
    (gogoproto.moretags)     = "yaml:\"reward_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}
