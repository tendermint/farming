syntax = "proto3";

package cosmos.farming.v1beta1;

import "tendermint/farming/v1beta1/farming.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tendermint/farming/x/farming/types";

// Query defines the gRPC query service for the farming module.
service Query {
  // Params returns parameters of the farming module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get                                           = "/cosmos/farming/v1beta1/params";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns all parameters of the farming module.";
  external_docs: {
  url:
    "https://github.com/tendermint/farming/blob/master/x/farming/spec/07_params.md";
  description:
    "Find out more about the params";
  }
  };
}

// Plans returns all plans.
rpc Plans(QueryPlansRequest) returns (QueryPlansResponse) {
  option (google.api.http).get                                           = "/cosmos/farming/v1beta1/plans";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns a list of all farming plans with pagination result.";
external_docs: {
url:
  "https://github.com/tendermint/farming/tree/master/docs/How-To/cli#Plans";
description:
  "Find out more about the query and error codes";
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = invalid plan type PLAN_TYPE","details":[]}'
    }
  }
}
responses: {
key:
  "500" value: {
  description:
    "Internal Server Error" examples: {
    key:
      "application/json" value: '{"code":13,"message":"rpc error: code = Internal desc = error","details":[]}'
    }
  }
}
};
}

// Plan returns a specific plan.
rpc Plan(QueryPlanRequest) returns (QueryPlanResponse) {
  option (google.api.http).get                                           = "/cosmos/farming/v1beta1/plans/{plan_id}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns the farming plan that corresponds to the plan_id.";
external_docs: {
url:
  "https://github.com/tendermint/farming/tree/master/docs/How-To/cli#plan";
description:
  "Find out more about the query and error codes";
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
responses: {
key:
  "404" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":5,"message":"rpc error: code = NotFound desc = plan plan_id not found","details":[]}'
    }
  }
}
responses: {
key:
  "500" value: {
  description:
    "Internal Server Error" examples: {
    key:
      "application/json" value: '{"code":13,"message":"rpc error: code = Internal desc = error","details":[]}'
    }
  }
}
};
}

// Missing doc here
rpc Stakings(QueryStakingsRequest) returns (QueryStakingsResponse) {
  option (google.api.http).get                                           = "/cosmos/farming/v1beta1/stakings/{farmer}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns all stakings (staked and queued coins) that corresponds to the farmer";
external_docs: {
url:
  "https://github.com/tendermint/farming/tree/master/docs/How-To/cli#stakings";
description:
  "Find out more about the query and error codes";
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// Missing doc here
rpc TotalStakings(QueryTotalStakingsRequest) returns (QueryTotalStakingsResponse) {
  option (google.api.http).get = "/cosmos/farming/v1beta1/total_stakings/{staking_coin_denom}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns total stakings that corresponds to the staking_coin_denom";
external_docs: {
url:
  "https://github.com/tendermint/farming/tree/master/docs/How-To/cli#totalstakings";
description:
  "Find out more about the query and error codes";
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

rpc Rewards(QueryRewardsRequest) returns (QueryRewardsResponse) {
  option (google.api.http).get                                           = "/cosmos/farming/v1beta1/rewards/{farmer}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns all rewards coins that corresponds to the farmer";
external_docs: {
url:
  "https://github.com/tendermint/farming/tree/master/docs/How-To/cli#rewards";
description:
  "Find out more about the query and error codes";
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}

// CurrentEpochDays returns current epoch days.
rpc CurrentEpochDays(QueryCurrentEpochDaysRequest) returns (QueryCurrentEpochDaysResponse) {
  option (google.api.http).get                                           = "/cosmos/farming/v1beta1/current_epoch_days";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Returns the current epoch days";
external_docs: {
url:
  "https://github.com/tendermint/farming/tree/master/docs/How-To/cli#currentepochdays";
description:
  "Find out more about the query and error codes";
}
responses: {
key:
  "400" value: {
  description:
    "Bad Request" examples: {
    key:
      "application/json"
      value: '{"code":3,"message":"rpc error: code = InvalidArgument desc = empty request","details":[]}'
    }
  }
}
};
}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryPlansRequest is the request type for the Query/Plans RPC method.
message QueryPlansRequest {
  string                                type                 = 1;
  string                                farming_pool_address = 2;
  string                                termination_address  = 3;
  string                                staking_coin_denom   = 4;
  string                                terminated           = 5;
  cosmos.base.query.v1beta1.PageRequest pagination           = 6;
}

// QueryPlansResponse is the response type for the Query/Plans RPC method.
message QueryPlansResponse {
  // plans are the existing plans
  repeated google.protobuf.Any plans = 1 [(cosmos_proto.accepts_interface) = "PlanI"];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPlanRequest is the request type for the Query/Plan RPC method.
message QueryPlanRequest {
  uint64 plan_id = 1;
}

// QueryPlanResponse is the response type for the Query/Plan RPC method.
message QueryPlanResponse {
  google.protobuf.Any plan = 1 [(cosmos_proto.accepts_interface) = "PlanI"];
}

message QueryStakingsRequest {
  string farmer             = 1;
  string staking_coin_denom = 2;
}

message QueryStakingsResponse {
  repeated cosmos.base.v1beta1.Coin staked_coins = 1
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin queued_coins = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

message QueryTotalStakingsRequest {
  string staking_coin_denom = 1;
}

message QueryTotalStakingsResponse {
  string amount = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

message QueryRewardsRequest {
  string farmer             = 1;
  string staking_coin_denom = 2;
}

message QueryRewardsResponse {
  repeated cosmos.base.v1beta1.Coin rewards = 1
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

// QueryCurrentEpochDaysRequest is the request type for the Query/CurrentEpochDays RPC method.
message QueryCurrentEpochDaysRequest {}

// QuerCurrentEpochDaysResponse is the response type for the Query/CurrentEpochDays RPC method.
message QueryCurrentEpochDaysResponse {
  uint32 current_epoch_days = 1;
}